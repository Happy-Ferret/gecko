#!/usr/bin/env node

var Path = require("path");
var Fs = require("fs");

var Util = require("./lib/util");
var Mozfetcher = require("./lib/mozfetcher");

// A small script to invoke cfx from the jetpack platform with proper arguments.
// accepts a single argument on the command line which is the path to the
// "entry point HTML" - that which should be used as the browser's UI.

// set the cuddlefish "root directory" for this process if it's not already
// set in the environment
var cuddlefish_root = process.cwd();

// set the "build directory", where we'll output built artifacts, download xulrunner,
// etc.
var build_dir = Path.join(cuddlefish_root, "build");

var executionMode = "run";

// We should migrate to optparse
var browserToLaunch = null
var argv = [].concat(process.argv);
argv.shift();
var argc = argv.length;
if (argc > 1) {
  switch (argv[1]) {
    case "package":
      executionMode = "package";
      console.log("Packaging a xulrunner application (directory) into build/");
      if (arc > 2)
        browserToLaunch = Util.findBrowserHTML(argv[2]);
      break;
    case "appify":
      executionMode = "appify";
      console.log("Generating a standalone, redistributable, application");
      if (argc > 2)
        browserToLaunch = Util.findBrowserHTML(argv[2]);
      break;
    case "docs":
      executionMode = "sdocs";
      console.log("Generating documentation");
      break;
    case "tests":
      executionMode = "testex";
      console.log("Running Chromeless tests");
      break;
    default:
      browserToLaunch = Util.findBrowserHTML(argv[1]);
      break;
  }
}

if (!browserToLaunch) {
  browserToLaunch = Util.findBrowserHTML(Path.join(cuddlefish_root, "examples",
    "first_browser", "index.html"));
}

// Throw an error message if we can't figure out what html file
// is the browser's HTML entry point
if (!Fs.existsSync(browserToLaunch)) {
  console.error("Can't find browser HTML (tried '" + browserToLaunch + "')");
  process.exit(1);
}

var fetcher = new Mozfetcher(build_dir);
fetcher.fetchIfNeeded(function(err, archive) {
  if (err) {
    console.error(err);
    process.exit(1);
  }
  
  fetcher.unpack(fetcher.getArchivePath(), function(err) {
    if (err) {
      console.error(err);
      process.exit(1);
    }
  });
});
