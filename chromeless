#!/usr/bin/env node
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

"use strict";

var Path = require("path");
var Fs = require("fs");
var Multi = require("multimeter");

var Util = require("./lib/util");
var Mozfetcher = require("./lib/mozfetcher");
var Moztarball = require("./lib/moztarball");
var Build = require("./lib/build");

var multi = Multi(process);

// Exit handler
function onExit(ex) {
  Util.log("Exiting...");
  if (multi)
    multi.destroy();
  if (ex)
    throw ex;
}
process.on("exit", onExit);
process.on("UncaughtException", onExit);

function exitWithError(err, code) {
  if (err)
    Util.log(err, "error");
  process.exit(code || 1);
}

// A small script to invoke cfx from the jetpack platform with proper arguments.
// accepts a single argument on the command line which is the path to the
// "entry point HTML" - that which should be used as the app's UI.

// set the cuddlefish "root directory" for this process if it's not already
// set in the environment
var cwd = process.cwd();

// set the "build directory", where we'll output built artifacts, download xulrunner,
// etc.
var buildDir = Path.join(cwd, "build");

var executionMode = "run";

// TODO: implement better arg parsing and CLI help msg.
var appToLaunch = null
var argv = [].concat(process.argv);
argv.shift();
var argc = argv.length;
if (argc > 1 && Build.executionModes[argv[1]]) {
  executionMode = argv[1];
  switch (argv[1]) {
    case "package":
      Util.log("Packaging a xulrunner application (directory) into build/");
      if (arc > 2)
        appToLaunch = Util.findAppHTML(argv[2]);
      break;
    case "appify":
      Util.log("Generating a standalone, redistributable, application");
      if (argc > 2)
        appToLaunch = Util.findAppHTML(argv[2]);
      break;
    case "docs":
      Util.log("Generating documentation");
      break;
    case "test":
      Util.log("Running Chromeless tests");
      break;
    default:
      appToLaunch = Util.findAppHTML(argv[2]);
      break;
  }
}

if (!appToLaunch) {
  appToLaunch = Util.findAppHTML(Path.join(cwd, "examples",
    "api-demo", "index.html"));
}

// Throw an error message if we can't figure out what html file is the app's
// HTML entry point
if (!Fs.existsSync(appToLaunch))
  exitWithError("Can't find app HTML (tried '" + appToLaunch + "')");

var fetcher = new Mozfetcher(buildDir, multi);
fetcher.fetchIfNeeded(function(err, tarball) {
  if (err)
    exitWithError(err);

  if (tarball) {
    new Moztarball(buildDir, multi).unpack(tarball || fetcher.getArchivePath(), function(err) {
      if (err)
        exitWithError(err);

      // If after all that we still think we need to fetch the thing, that means
      // unpacked bits don't match expected signatures. Safest to purge them
      // from disk and/or refuse to run.
      fetcher.needsFetch(function(err, needsFetch, msg) {
        if (!err && needsFetch) {
          err = "Signature mismatch in unpacked xulrunner contents.  Eep!\n" +
                (msg || "");
        }
        if (err)
          exitWithError(err);
        run();
      });
    });
  } else {
    run();
  }

  function run() {
    // DONE! Alright, now can finally start doing something interesting...
    var xulrunner = fetcher.getXulrunnerPath();

    // TODO: make this dependent on the CLI flags.
    Build.appify(executionMode, xulrunner, appToLaunch, buildDir, multi, function(err) {
      if (err)
        exitWithError(err);
      process.exit();
    });
  }
});
